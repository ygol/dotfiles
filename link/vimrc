set nocompatible
filetype off
set rtp+=~/.vim/bundle/vundle/Vundle.vim
call vundle#rc()

Plugin 'gmarik/vundle'

" Plugin 'elzr/vim-json'
" Plugin 'airblade/vim-gitgutter'
" Plugin 'fatih/vim-go'
Plugin 'benmills/vimux'
Plugin 'bling/vim-airline'
Plugin 'pearofducks/ansible-vim'
Plugin 'christoomey/vim-tmux-navigator'
"Plugin 'edkolev/tmuxline.vim'
Plugin 'glench/Vim-Jinja2-Syntax'
Plugin 'godlygeek/tabular'
Plugin 'honza/vim-snippets'
" Plugin 'jazzCore/ctrlp-cmatcher'
Plugin 'ctrlpvim/ctrlp.vim'
Plugin 'majutsushi/tagbar'
Plugin 'MarcWeber/vim-addon-mw-utils'
" Plugin 'mattn/gist-vim'
Plugin 'mattn/webapi-vim'
" Plugin 'ngmy/vim-rubocop'
" Plugin 'othree/html5.vim'
" Plugin 'klen/python-mode'
Plugin 'pangloss/vim-javascript'
" Plugin 'rizzatti/dash.vim'
" Plugin 'rizzatti/funcoo.vim'
Plugin 'mileszs/ack.vim'
Plugin 'scrooloose/syntastic'
Plugin 'sirVer/ultisnips'
" Plugin 'spllr/vim-padrino'
Plugin 'terryma/vim-multiple-cursors'
" Plugin 'tomtom/tlib_vim'
" Plugin 'tomtom/vimtlib'
" Plugin 'tonchis/vim-to-github'
Plugin 'tpope/vim-dispatch'
" Plugin 'tpope/vim-endwise'
" Plugin 'lambdalisue/vim-gita'
" Plugin 'tpope/vim-rake'
Plugin 'tpope/vim-sensible'
Plugin 'tpope/vim-markdown'
Plugin 'tpope/vim-surround'
Plugin 'tpope/vim-commentary'
Plugin 'tpope/vim-fugitive'
Plugin 'Valloric/YouCompleteMe'
" Plugin 'vim-pandoc/vim-pandoc'
" Plugin 'hokaccha/vim-prove'
" Plugin 'vim-pandoc/vim-pandoc-syntax'
" Plugin 'vim-perl/vim-perl'
" Plugin 'vim-ruby/vim-ruby'
" Plugin 'yko/mojo.vim'
" Plugin 'mivok/vimtodo'
" Plugin 'zah/nimrod.vim'
Plugin 'bronson/vim-trailing-whitespace'
" Plugin 'janko-m/vim-test'
Plugin 'nvie/vim-flake8'
Plugin 'gregsexton/MatchTag'

Plugin 'jiangmiao/auto-pairs'
" Plugin 'Townk/vim-autoclose'
Plugin 'vim-scripts/closetag.vim'

" For OrgMode
Plugin 'jceb/vim-orgmode'
Plugin 'vim-scripts/utl.vim'
Plugin 'taglist.vim'
Plugin 'chrisbra/NrrwRgn'
Plugin 'mattn/calendar-vim'
Plugin 'vim-scripts/SyntaxRange'
Plugin 'tpope/vim-speeddating'
Plugin 'tpope/vim-repeat'

" Themes
Plugin 'joshdick/onedark.vim'
Plugin 'dracula/vim'


"colorscheme onedark
colorscheme dracula
filetype plugin indent on
syntax on
set number
set relativenumber
autocmd InsertEnter * :set number norelativenumber
autocmd InsertLeave * :set relativenumber


set mouse=
set mousehide

set hlsearch
set showmatch
set incsearch
set ignorecase
set autoindent
set history=1000
set cursorline
set expandtab
set shiftwidth=2
set tabstop=2
set softtabstop=2
set clipboard=unnamed
set directory=/tmp
set pastetoggle=<leader>v

set laststatus=2
set statusline=%F%m%r%h%w\ [FORMAT=%{&ff}]\ [TYPE=%Y]\ [POS=%04l,%04v][%p%%]\ [LEN=%L]\ [BUF=%n]\ %{strftime(\"%d-%m-%Y\ %H:%M:%S\",getftime(expand(\"%:p\")))}

" Airline
let g:airline#extensions#tabline#enabled = 0
let g:airline_powerline_fonts = 1
set background=dark
let g:airline_theme = 'dark'

let g:tagbar_left = 1
let g:tagbar_sort = 0
let g:tagbar_autoshowtag = 1
let g:tagbar_autoclose = 1
let g:tagbar_ctags_bin = '/usr/local/bin/ctags'
let g:tagbar_width = 30 
let g:tagbar_foldlevel = 2

let g:vim_markdown_folding_disabled=1
let g:pymode_folding = 0

let g:syntastic_javascript_checkers = ['jsxhint']
let g:pandoc#modules#disabled = ["folding"]
let g:pandoc#formatting#mode = 'ha'
"let g:pandoc#formatting#textwidth = 79
let g:pandoc#formatting#textwidth = 150


autocmd FileType ruby,eruby let g:rubycomplete_buffer_loading = 1
autocmd FileType ruby,eruby let g:rubycomplete_classes_in_global = 1
autocmd FileType ruby,eruby let g:rubycomplete_rails = 1
autocmd BufNewFile,BufReadPost *.go set filetype=go
autocmd FileType go compiler go
autocmd FileType go autocmd BufWritePre <buffer> GoFmt
autocmd BufNewFile,BufRead *.tt setf tt2
au BufRead,BufNewFile *.md,*.markdown setlocal textwidth=150 wrap linebreak nolist
"au BufRead,BufNewFile *.md,*.markdown setlocal textwidth=79 wrap linebreak nolist




if has("autocmd")
  au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$") | exe "normal g'\"" | endif
endif


:nmap <leader>a :Ack
:nmap <silent> <leader>d <Plug>DashGlobalSearch
:nmap <silent> <leader>p :TagbarToggle<cr>
:nmap <silent> <leader>n :cnext<cr>
nnore <esc><esc> :let @/ = ""<cr>

:nmap <silent> <leader>; :CtrlP<cr>
:nmap ; :CtrlPBuffer<cr>
let g:ctrlp_match_window = 'top,order:ttb,min:1,max:10,results:10'
let g:ctrlp_switch_buffer = 0
"let g:ctrlp_user_command = ['.git/', 'git --git-dir=%s/.git ls-files -oc --exclude-standard']
let g:ctrlp_working_path_mode = 2
let g:ctrlp_cmd = 'CtrlPMRUFile'

let g:ctrlp_user_command = 'ag %s -i --nocolor --nogroup --hidden
      \ --ignore .git
      \ --ignore .svn
      \ --ignore .hg
      \ --ignore .DS_Store
      \ --ignore "**/*.pyc"
      \ -g ""'

if $TERM_PROGRAM =~ "iTerm"
  if exists('$TMUX')
    let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
    let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
  else
    let &t_SI = "\<Esc>]50;CursorShape=1\x7"
    let &t_EI = "\<Esc>]50;CursorShape=0\x7"
  endif
endif
noremap <Up> <NOP>
noremap <Down> <NOP>
noremap <Left> <NOP>
noremap <Right> <NOP>

let g:UltiSnipsExpandTrigger ="<Leader><Tab>"
let g:UltiSnipsJumpForwardTrigger="<Leader><Tab>"
let g:UltiSnipsJumpBackwardTrigger="<Leader><s-Tab>"

" Tab navigation
let g:lasttab = 1
nnoremap tt :exe "tabn ".g:lasttab<CR>
au TabLeave * let g:lasttab = tabpagenr()
nnoremap tn :tabnew<CR>
nnoremap tj  :tabfirst<CR>
nnoremap tl  :tabnext<CR>
nnoremap th  :tabprev<CR>
nnoremap tk  :tablast<CR>
nnoremap te  :tabedit<space>
nnoremap tm  :tabm<Space>
nnoremap td  :tabclose<CR>
map <space> viw


command! Fuck w !sudo tee % >/dev/null

noremap <C-_> :call AckSearch()<CR>
function! AckSearch()
  let a:top_level = split(expand("%"), "/")
  let a:query = getline("'<")
  let a:start = getpos("'<")[2]
  let a:stop = getpos("'>")[2]
 
  if a:start == a:stop
    let a:query = expand("<cword>")
  else
    let a:query = a:query[a:start - 1: a:stop - 1]
  endif
 
  call ack#Ack("grep!", a:query . " " . a:top_level[0])
endfunction

if executable('ag')
    let g:ackprg = 'ag --vimgrep'
endif

let g:ansible_extra_syntaxes = "sh.vim perl.vim"

:autocmd BufRead,BufNewFile /home/ygol/Source/_rg/* call SetRgOptions()

" function! SetRgOptions()
"   let g:syntastic_enable_perl_checker = 1
"   setlocal tabstop=4 shiftwidth=4
"   let g:syntastic_perl_lib_path = [ "./lib", "./lib/auto", "/home/marcus/Source/_rg/libraries/lib" ]
"   let g:syntastic_perl_args_after = '--quiet --nocolor --verbose "\%s:\%f:\%l:\%c:(\%s) \%m (\%e)\n" -p ~/Source/_rg/libraries/.perlcriticrc'
"   let g:syntastic_perl_checkers = ['perl','perlcritic']
" endfunction

" command -range=% -nargs=* Tidy <line1>,<line2>!
"   \perltidy <args>

"Use 24-bit (true-color) mode in Vim/Neovim when outside tmux.
"If you're using tmux version 2.2 or later, you can remove the outermost $TMUX check and use tmux's 24-bit color support
"(see < http://sunaku.github.io/tmux-24bit-color.html#usage > for more information.)
if (empty($TMUX))
  if (has("nvim"))
    "For Neovim 0.1.3 and 0.1.4 < https://github.com/neovim/neovim/pull/2198 >
    let $NVIM_TUI_ENABLE_TRUE_COLOR=1
  endif
  "For Neovim > 0.1.5 and Vim > patch 7.4.1799 < https://github.com/vim/vim/commit/61be73bb0f965a895bfb064ea3e55476ac175162 >
  "Based on Vim patch 7.4.1770 (`guicolors` option) < https://github.com/vim/vim/commit/8a633e3427b47286869aa4b96f2bfc1fe65b25cd >
  " < https://github.com/neovim/neovim/wiki/Following-HEAD#20160511 >
  if (has("termguicolors"))
    set termguicolors
  endif
endif


" OS X-like space bar to scroll.
nnoremap <Space> <C-F>


nmap <silent> <leader>t :TestNearest<CR>
nmap <silent> <leader>T :TestFile<CR>
nmap <silent> <leader>A :TestSuite<CR>
nmap <silent> <leader>l :TestLast<CR>
nmap <silent> <leader>g :TestVisit<CR>

let test#strategy="neovim"

" ###############
" Ygol ADDED
" ###############
" automatically rebalance windows on vim resize
autocmd VimResized * :wincmd =
"## Hacks from https://thoughtbot.com/upcase/videos/onramp-to-vim-configuration
""

" Easily edit and source my vimrc file
nmap <leader>vr :tabe $MYVIMRC<cr>
nmap <leader>so :source $MYVIMRC<cr>
"
" " Esc when in insert mode
imap jk <esc>
imap kj <esc>
"
" Bind `q` to close the buffer for help files
autocmd Filetype help nnoremap <buffer> q :q<CR>
"
" Copy file to register
map <Leader>co ggVG"*y

" Open help in new tab
cabbrev help tab help
cabbrev h tab h
" Vim Flake8 shortcut change to F5 to reflect old pep8 plugin
autocmd FileType python map <buffer> <F5> :call Flake8()<CR>
" Automatically execute flake8 validation on python file write
autocmd BufWritePost *.py call Flake8()

let t_Co=256
au! BufRead,BufNewFile *.rml set ft=xml
au! BufRead,BufNewFile .openerprc set ft=cfg
let g:pep8_ignore="E501"
let g:syntastic_python_flake8_args='--ignore=E501'
